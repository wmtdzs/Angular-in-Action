在Angular中，作用域间有非常清晰的层次结构关系，类似于DOM树状图形，
最顶层的就是rootScope作用域，其余的都是在它基础上进行分支和嵌套的。
在这种关系下的作用域，它们之间的数据通信变得相对复杂，
有下列两种方式可以实现作用域的通信：

* 服务(service)
  通过在作用域间创建一个单例服务，由该服务来处理各个作用域间的数据通信

* 事件(event)
  可以通过作用域间的事件进行数据通信，而要使用事件，则必须调用Angular
  提供的两个方法$broadcasted和$emitted

  方法$broadcasted的功能是将从父级作用域传播至子级作用域，调用格式如下：
    $broadcasted(eventname, data);
    其中，参数eventname为定义的事件名称，data为事件传播过程中携带的数据信息。

  方法$emitted的功能是将事件从子级作用域传播至父级作用域，调用格式如下：
    $emitted(eventname, data);
    各参数的功能与$broadcasted相同

  除这两个传播事件的方法外，还需要通过调用$on方法，在作用域中监控传播来的事件
  并获取相应的数据，它的调用格式如下：
    $on(eventname, function(event, data) {
        // 接收传播事件的处理代码
    });
    eventname为需要监控传播来的事件名称
    event为事件传播过程中自带的特征，该特征包括以下几个重要的属性
    1. event.targetScope，返回发起传播事件的作用域名称
    2. event.currentScope，返回正在接受传播事件的作用域名称
    3. event.name，传播事件的名称
    4. event.stopPropagation()，防止事件进行冒泡操作的函数
    5. event.preventDefault()，阻止代码事件的发生
    6. event.defaultPrevented，当执行了preventDefault()方法时，该属性值为true，否则为false

  而在$on方法处理传播事件的函数中，另外一个data参数，则为事件在传播过程中携带的数据，
  通过该对象可以在各个监控的作用域中获取传播时的数据，实现数据通信的宫呢个

  通过作用域的事件可以实现数据通信的功能，但是它们的传播范围非常有限，只能是调用
  $broadcasted和$emitted这两个方法，在父和子级的作用域间进行传播，其他不具有这种关系
  的作用域将无法监控到传播来的事件