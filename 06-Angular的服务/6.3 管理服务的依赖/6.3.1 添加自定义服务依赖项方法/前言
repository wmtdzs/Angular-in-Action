(1)隐式指名
所谓隐式指名，指的是在创建服务的函数中，直接在参数中调用，不进行任何声明。
采用这种方式，若代码进行压缩时，注入的对象有可能失效
app.factory('serviceName', function(dep1, dep2) {});
上述代码中，app表示构建好的模块，serviceName表示服务名，dep1和dep2表示依赖
注入的服务或对象名称

(2)调用$inject属性
可以将需要注入服务的各种对象包装成一个数组，并将它作为$inject属性值，但这种
方式因为执行的效率很低，因此不推荐使用
var sf = function(dep1, dep2) {};
sf.$inject = ['dep1', 'dep2'];
app.factory('ServiceName', sf);
上述代码中，sf表示服务执行的函数，将该函数的$inject属性值设置为依赖注入的对象
名称，当使用创建服务方法时，属性值对应的数组将随函数一起注入服务中

(3)显示声明
所谓显示声明，指的是在创建服务的函数中，添加一个数组，在数组中按顺序声明需要
注入的服务或对象名称，这种方式既高效，又不会丢失代码
app.factory('ServiceName', ['dep1', 'dep2', function(dep1, dep2) {}]);
上述代码中的参数与隐式指名的方式相同，
注意，数组中声明的对象顺序必须和函数中参数的顺序一致，否则报错