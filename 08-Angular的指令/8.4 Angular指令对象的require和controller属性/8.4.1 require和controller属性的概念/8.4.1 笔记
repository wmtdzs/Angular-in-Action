require和controller属性常用于多个自定义的指令元素嵌套时使用，即当一个子元素指令需要与父元素
指令通信时，就需要添加并使用者两个属性值。

require属性在创建子元素指令时添加，它的属性值用于描述与父元素指令通信时的方式，如“^”符号
表示向外层寻找指定名称的指令，“?”符号表示即使没有找到，也不会出现异常。
下列代码来表示require属性的值：
    require: "^?myDirective";
上述代码表示，向外层寻找名称为“myDirective”的指令，若没有找到，也不出现异常，而这种向外层
的方式，也包括本身，也就是说，可以在自身寻找其他名称的指令。

与require不同，controller属性值是一个构造性函数，在创建父元素指令时添加，可以在该函数中添加
多个方法或属性。在添加后，这些方法和属性都会被实例的对象所继承，而这个示例对象则是子元素指令
中“link”函数的第4个参数，也就是说，当在子元素指令中添加了require属性，并通过属性值指定父元
素指令的名称。那么，就可以通过子元素指令中“lik”函数的第4个参数来访问父元素指令中controller
属性添加的方法，因为这个参数是父元素指令的实例。
与在子元素指令中访问父元素方法不同，在父元素中，添加构造函数时，函数中的参数就是子元素指令中
的“scope”对象，代码如下：
    controller: function() {
        this.a = function(childDirective) {
            // 方法a的函数体
        }
    }
在上述代码中，controller属性值对应一个构造函数，在函数中，this代表父元素指令本身，方法a是构造
函数中的一个任意方法，在定义这个方法时，形参childDirective就是元素指令中的scope对象，通过这种
方式，在父元素中，可以很轻易的访问到子元素指令中的scope对象。